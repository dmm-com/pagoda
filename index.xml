<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pagoda</title><link>https://dmm-com.github.io/pagoda/</link><description>Recent content on Pagoda</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://dmm-com.github.io/pagoda/index.xml" rel="self" type="application/rss+xml"/><item><title>Changelog</title><link>https://dmm-com.github.io/pagoda/release_note/CHANGELOG/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/release_note/CHANGELOG/</guid><description>in development Fixed Fixed a bug not to change referral values when entity was edited v2.4.0 Changed Change implementation about editing Entity to disable to edit type of EntityAttr v2.3.1 Fixed Fixed a problem that date value won&amp;rsquo;t be shown at advanced search result v2.3.0 Added Added new AttributeType array group that could contain multiple Group referral in an Attribute value v2.2.0 Added Added a method in Entry to get an AttributeValue from Entry object with a small number of SQL v2.</description></item><item><title>Installation and Configuration</title><link>https://dmm-com.github.io/pagoda/getting_started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/getting_started/installation/</guid><description>(TBD)</description></item><item><title>Tutorial</title><link>https://dmm-com.github.io/pagoda/getting_started/tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/getting_started/tutorial/</guid><description>(TBD)</description></item><item><title>Development</title><link>https://dmm-com.github.io/pagoda/getting_started/development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/getting_started/development/</guid><description>Setup Here is the documentation to setup the development environment of Pagoda.
Installation of Pagoda You have to install Python3.11+ to run Pagoda like below (for the case of ubuntu).
user@hostname:~$ sudo apt-get update user@hostname:~$ sudo apt-get install python3 python3-pip python3-venv You have to install libraries.
user@hostname:~$ sudo apt-get install libldap2-dev libsasl2-dev libxmlsec1-dev libmysqlclient-dev pkg-config (for macOS)
user@hostname:~$ brew install libxmlsec1 mysql-client pkg-config mysql-connector-python Then, you can install libraries on which Pagoda depends by following after cloning this repository.</description></item><item><title/><link>https://dmm-com.github.io/pagoda/advanced/advanced_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/advanced_search/</guid><description>Advanced Search Advanced Search is a powerful feature that allows you to search across multiple entities and their attributes with various search options and filters.
Features Search Capabilities Cross-Entity Search
Search across multiple entity types simultaneously Filter results by entity type Combine search results from different entities Attribute-Based Search
Search by specific attribute values Support for various data types: Text (string, multi-line text) Numbers Dates and date ranges Boolean values Object references Search Options</description></item><item><title/><link>https://dmm-com.github.io/pagoda/advanced/frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/frontend/</guid><description>Frontend Architecture Pagoda provides two distinct user interfaces: a modern React-based SPA (New UI) and a traditional Django template-based interface (Legacy UI). This document explains both interfaces, their features, and how to work with them.
For Users Overview New UI (React SPA) Modern, responsive single-page application Fast, client-side navigation Real-time updates and validations Consistent look and feel using Material-UI Internationalization support Legacy UI (Django Templates) Traditional server-side rendered pages Direct database operations Stable and proven interface Simpler architecture for basic operations Key Features Common Features Entity and attribute management User and group administration Access control management Advanced search capabilities History tracking Webhook management New UI Specific Features Improved response times through API-based operations Modern form handling with real-time validation Enhanced user experience with instant feedback Consistent styling across all pages Mobile-friendly responsive design Legacy UI Specific Features Direct database operations Server-side validation Traditional navigation pattern Simpler debugging process When to Use Which UI Use New UI When Working with modern browsers Requiring real-time feedback Needing mobile-friendly interface Performing complex data operations Integrating with other modern web applications Use Legacy UI When Requiring simpler, proven interface Working in environments with limited JavaScript support Needing direct database operations Performing basic CRUD operations For Developers Architecture Overview New UI Architecture Core Technologies React 18 TypeScript Material-UI (MUI) react-router for routing react-hook-form for form management zod for schema validation i18next for internationalization Directory Structure frontend/src/ ├── apiclient/ # API client wrapper ├── components/ # Reusable UI components ├── hooks/ # Custom React hooks ├── i18n/ # Internationalization ├── pages/ # Page components ├── repository/ # Data access layer ├── routes/ # Routing configuration └── services/ # Business logic Key Components API Client: Auto-generated from OpenAPI specs Form Management: react-hook-form with zod validation State Management: React hooks and context Routing: react-router with type-safe routes UI Components: Material-UI based components Legacy UI Architecture Core Technologies Django Templates jQuery (where needed) Bootstrap for styling Template Structure templates/ ├── advanced_search/ # Search interface ├── edit_entry/ # Entry management ├── list_entry/ # Entry listing ├── registration/ # User registration ├── role/ # Role management └── show_entry/ # Entry display Development Guidelines Setting Up Development Environment # Install dependencies npm install # Start development server npm run watch # Build for production npm run build:production Adding New Features New UI Development</description></item><item><title>CustomView</title><link>https://dmm-com.github.io/pagoda/advanced/custom_view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/custom_view/</guid><description>(TBD)</description></item><item><title>Pagoda Overview</title><link>https://dmm-com.github.io/pagoda/getting_started/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/getting_started/overview/</guid><description>Pagoda is an information management system with high flexibility of access control and high extensibility of data. This enables to manage information in any type of use-cases. This document describes these features.
Data model that meets with extensibility Pagoda manages informaiton by using following two type of data-structure.
Entity - has meta data (what kind of data it has and how). Entry - has actual data in conformity to an Entity which is associated with it.</description></item></channel></rss>