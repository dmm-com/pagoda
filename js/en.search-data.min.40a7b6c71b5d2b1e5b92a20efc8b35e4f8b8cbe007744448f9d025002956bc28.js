"use strict";(function(){const t={};t.doc={id:"id",field:["title","content"],store:["title","href","parent"]};const e=FlexSearch.create(t);window.geekdocSearchIndex=e,e.add({id:0,href:"/advanced/",title:"Advanced Topics",parent:"Pagoda",content:""}),e.add({id:1,href:"/release_note/CHANGELOG/",title:"Changelog",parent:"Release Notes",content:"in development Fixed Fixed a bug not to change referral values when entity was edited v2.4.0 Changed Change implementation about editing Entity to disable to edit type of EntityAttr v2.3.1 Fixed Fixed a problem that date value won\u0026rsquo;t be shown at advanced search result v2.3.0 Added Added new AttributeType array group that could contain multiple Group referral in an Attribute value v2.2.0 Added Added a method in Entry to get an AttributeValue from Entry object with a small number of SQL v2.1.0 Added Added an API endpoint that returns change history of specific entry\u0026rsquo;s attribute. Added a feature to be able to confirm job of deleting entry from Job list view (#10) v2.0.1 Fixed Fixed a bug that mandatory parameter was able to be updated with empty value by specifying \u0026lsquo;- NOT SET -\u0026rsquo; value (#20) v2.0.0 Added Added a new optional authentication feature which is able to authenticate user with LDAP server (#6) "}),e.add({id:2,href:"/getting_started/installation/",title:"Installation and Configuration",parent:"Getting Started",content:`(TBD)
`}),e.add({id:3,href:"/posts/",title:"News",parent:"Pagoda",content:""}),e.add({id:4,href:"/release_note/",title:"Release Notes",parent:"Pagoda",content:""}),e.add({id:5,href:"/getting_started/tutorial/",title:"Tutorial",parent:"Getting Started",content:`(TBD)
`}),e.add({id:6,href:"/getting_started/development/",title:"Tutorial",parent:"Getting Started",content:"Setup Here is the documentation to setup the development environment of Pagoda.\nInstallation of Pagoda You have to install Python3.11+ to run Pagoda like below (for the case of ubuntu).\nuser@hostname:~$ sudo apt-get update user@hostname:~$ sudo apt-get install python3 python3-pip python3-venv You have to install libraries.\nuser@hostname:~$ sudo apt-get install libldap2-dev libsasl2-dev libxmlsec1-dev libmysqlclient-dev pkg-config (for macOS)\nuser@hostname:~$ brew install libxmlsec1 mysql-client pkg-config mysql-connector-python Then, you can install libraries on which AieOne depends by following after cloning this repository. But we recommand you to setup airone on the separated environment using virtualenv not to pollute system-wide python environment.\nuser@hostname:~$ git clone https://github.com/dmm-com/airone.git user@hostname:~$ cd airone user@hostname:~/airone$ python3 -m venv virtualenv user@hostname:~/airone$ source virtualenv/bin/activate (virtualenv) user@hostname:~/airone$ pip install pip --upgrade (virtualenv) user@hostname:~/airone$ pip install poetry (virtualenv) user@hostname:~/airone$ poetry install --only main # or, during development, install all (virtualenv) user@hostname:~/airone$ poetry install Setting-up Backend with docker-compose Install docker-compose command.\nRun middlewares with docker-compose.\nuser@hostname:~/airone$ docker-compose up (Setting-up Backend with manual) And you have to install RabbitMQ for executing heavy processing as background task using Celery.\nuser@hostname:~$ sudo apt-get install rabbitmq-server mysql-server python-dev libmysqlclient-dev Setting-up MySQL configuration Specifying character set of database is necessary. Please add following setting in the mysqld.cnf at mysqld section.\n[mysqld] ... character-set-server = utf8mb4 Then, you should restart MySQL server to apply for this configuration.\nuser@hostname:~$ sudo service mysql restart Iincrease the number of Slave databases with the MySQL replication function.\nYou can set database slave, with like this config:\nREPLICATED_DATABASE_SLAVES = [\u0026#39;slave1\u0026#39;, \u0026#39;slave2\u0026#39;] Setting-up Elasticsearch You have to setup JRE for executing elasticsearch.\nuser@hostname:~$ sudo add-apt-repository ppa:linuxuprising/java user@hostname:~$ sudo apt-get update user@hostname:~$ sudo apt-get install -y oracle-java13-installer The way to install elasticsearch is quite easy like that.\nuser@hostname:~$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.6-linux-x86_64.tar.gz user@hostname:~$ tar -xvf elasticsearch-7.17.6-linux-x86_64.tar.gz After installing it, you have to change configuration to accept connecting from Pagoda nodes.\n--- elasticsearch-7.17.6-linux-x86_64/config/elasticsearch.yml.old 2020-01-29 10:19:40.511687943 +0900 +++ elasticsearch-7.17.6-linux-x86_64/config/elasticsearch.yml 2020-01-29 10:41:23.103687943 +0900 @@ -52,7 +52,7 @@ # # Set the bind address to a specific IP (IPv4 or IPv6): # -#network.host: 192.168.0.1 +network.host: 0.0.0.0 # # Set a custom port for HTTP: # You should set sysctl as below because Elasticsearch requires to expand virtual memory area.\nuser@hostname:~$ sudo sysctl vm.max_map_count=262144 Finally, you can run ElasticSearch service like that.\nuser@hostname:~$ elasticsearch-7.17.6-linux-x86_64/bin/elasticsearch Setting-up Email configuration This step is optional. You can skip it if you don\u0026rsquo;t use email notifications.\nPagoda supports email based notification, now it\u0026rsquo;s mainly used for password-reset. You can set email backend, with like this config:\nEMAIL_BACKEND = \u0026#39;django.core.mail.backends.smtp.EmailBackend\u0026#39; EMAIL_HOST = \u0026#39;xxx\u0026#39; EMAIL_PORT = 25 EMAIL_HOST_USER = \u0026#39;xxx\u0026#39; EMAIL_HOST_PASSWORD = \u0026#39;xxx\u0026#39; EMAIL_USE_TLS = True If you hope to just try it in your local environment, you can use stdout instead:\nEMAIL_BACKEND = \u0026#39;django.core.mail.backends.console.EmailBackend\u0026#39; Setting-up Nginx (Optional) Install Nginx by package manager like this.\nuser@hostname:~$ sudo apt-get install nginx Create Self-Signed SSL Certificate and key-pair.\nuser@hostname:~$ openssl genrsa 2048 \u0026gt; server.key user@hostname:~$ openssl req -new -key server.key \u0026gt; server.csr ... (set appropriate configuration) user@hostname:~$ openssl x509 -days 3650 -req -signkey server.key \u0026lt; server.csr \u0026gt; server.crt user@hostname:~$ sudo mkdir /etc/nginx/ssl user@hostname:~$ sudo mv server* /etc/nginx/ssl Write following configuration for Pagoda on Nginx at /etc/nginx/conf.d/airone.conf.\nupstream airone { server hostname:8080; } server { listen 443 ssl; ssl_certificate /etc/nginx/ssl/server.crt; ssl_certificate_key /etc/nginx/ssl/server.key; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port 443; location / { rewrite ^/(.*) /$1 break; proxy_pass http://airone/; } access_log /var/log/nginx/airone.ssl.access.log combined; error_log /var/log/nginx/airone.ssl.error.log; # set longer to wait background processing until 300s proxy_read_timeout 300; } This includes the configuration to proxy HTTP request to Pagoda and cache static files. The static file path indicates the static directory which is in the top of Pagoda local repository. If necessary, please fix this value depending on your environment.\nInitialize Pagoda configuratoin You should create user and attach role in Elasticsearch.\nbin/elasticsearch-users useradd airone bin/elasticsearch-users roles airone --add superuser You should cerate database and user for airone in MySQL.\nuser@hostname:~$ mysql -u root -h 127.0.0.1 mysql\u0026gt; create database airone; mysql\u0026gt; create database test_airone; mysql\u0026gt; CREATE USER \u0026#39;airone\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; mysql\u0026gt; GRANT ALL ON airone.* to airone@\u0026#39;%\u0026#39;; mysql\u0026gt; GRANT ALL ON test_airone.* to airone@\u0026#39;%\u0026#39;; This command makes database schema using the django Migrations, and makes default user account.\nuser@hostname:~$ cd airone user@hostname:~/airone$ source virtualenv/bin/activate (virtualenv) user@hostname:~/airone$ tools/clear_and_initdb.sh (Optional) Please set the index as necessary.\nmysql\u0026gt; CREATE INDEX permission_codename_idx ON auth_permission (codename); Finally, you should create an initial user to login the system using tools/register_user.sh.\n(virtualenv) user@hostname:~/airone$ tools/register_user.sh demo Password: ## input password of this user Succeed in register user (demo) This creates following user.\nUsername Password demo demo If you want to create an administrative user who can access all information regardless of ACL (Please refer the User-Manual(TBD)), you can do it with -s, --superuser option. This creates another user who takes privilege of this system.\n(virtualenv) user@hostname:~/airone$ tools/register_user.sh -s admin Password: ## input password of this user Succeed in register user (admin) This regists all entries which has been created in the database to the Elasticsearch.\nYou can do it just by following command. The configurations about the database to read and Elasticsearch to register are referred from airone/settings.py.\n(virtualenv) user@hostname:~/airone$ python tools/initialize_es_document.py Run Pagoda You can start Pagoda as following and can browse from http://hostname:8080/\n(Please change the hostname to the appropriate one on which you installed Pagoda). e.g.\nuser@hostname:~$ cd airone user@hostname:~/airone$ source virtualenv/bin/activate (virtualenv) user@hostname:~/airone$ python manage.py runserver 0:8080 Run Celery In addition, you have to run Celery worker to execute background task as following.\nuser@hostname:~$ cd airone user@hostname:~/airone$ source virtualenv/bin/activate (virtualenv) user@hostname:~/airone$ celery -A airone worker -l info [Experimental] Build the new UI with React /ui/ serves React-based new UI. Before you try it, you need to build ui.js:\nInstall nvm command.\nInstall npm packages.\nuser@hostname:~$ nvm install 18.12.0 user@hostname:~$ cd airone user@hostname:~/airone$ npm install Build\nuser@hostname:~/airone$ npm run build (In development) user@hostname:~/airone$ npm run watch If you have any change on API V2, you need to run this command before you build:\nuser@hostname:~/airone$ npm run generate:client (For Customview) user@hostname:~/airone$ npm run generate:custom_client To customize UI:\nuser@hostname:~/airone$ cp -pi ./frontend/src/App.tsx ./frontend/src/customview/CustomApp.tsx (edit CustomApp.tsx) user@hostname:~/airone$ npm run build:custom API V2 client Prepare to install API client npm package published on GitHub Packages. TOKEN is a your GitHub PAT. Issue your PAT with checking this doc. Then, you just perform npm install as usual.\n$ cat \u0026gt; .npmrc //npm.pkg.github.com/:_authToken=TOKEN You can refer your local API client code before publishing it to GitHub Packages with following command.\n# generate the latest API client code on your local env $ npm run generate:client # refer the latest code temporarily $ npm run link:client If you modify something in API client code, you need to publish it with the package release GitHub Actions workflow. It will be triggered by labeling release-apiv2-client to the pull request by repository owners.\nAuto-format user@hostname:~$ cd airone user@hostname:~/airone$ source virtualenv/bin/activate (virtualenv) user@hostname:~/airone$ ruff format . (virtualenv) user@hostname:~/airone$ ruff check --fix . user@hostname:~/airone$ npm run fix Test for Django processing You can run tests for processing that is run by Django and Celery, which means backend processing, as below.\nuser@hostname:~$ cd airone user@hostname:~/airone$ source virtualenv/bin/activate (virtualenv) user@hostname:~/airone$ python manage.py test When you want to run a specific test (ModelTest.test_is_belonged_to_parent_group in the file of role/tests/test_model.py) , you can do it as below.\n(virtualenv) user@hostname:~/airone$ python manage.py test role.tests.test_model.ModelTest.test_is_belonged_to_parent_group Test for React processing You can run test for processing that is run by Browser, wihch means frontend processing as below.\nuser@hostname:~$ cd airone user@hostname:~/airone$ npm run test If you have any change on a page component, please re-build snapshots along with current implementaion as below.\nuser@hostname:~/airone$ npm run test:update When you want to run individual test (e.g. frontend/src/components/user/UserList.test.tsx), you can do it by following command.\nuser@hostname:~/airone$ npx jest -u frontend/src/components/user/UserList.test.tsx "}),e.add({id:7,href:"/getting_started/overview/",title:"AirOne Overview",parent:"Getting Started",content:`AirOne is an information management system with high flexibility of access control and high extensibility of data. This enables to manage information in any type of use-cases. This document describes these features.
Data model that meets with extensibility AirOne manages informaiton by using following two type of data-structure.
Entity - has meta data (what kind of data it has and how). Entry - has actual data in conformity to an Entity which is associated with it. This page shows an example how to manage information which has complex data-structure in this system as an example of an information management system of a library. This system manages book location information (where book is arranged in), book management information (what kind book is registered) and lending information (which book is lent to whom). The following an E-R diagram that descfribes the data-model of this system.
You can easily manage those complex information by making Entities on Air One as below.
And by making Entries, you can register and retrieve all kind of data instances which are mentioned above.
In this way, user can handle any kind of information and information which is associated with other ones by using this simple data-structure (Entity and Entry) other than above use-case. For more information about this AirOne\u0026rsquo;s datastructure, please see Entity and Entry page.
`}),e.add({id:8,href:"/categories/",title:"Categories",parent:"Pagoda",content:""}),e.add({id:9,href:"/advanced/custom_view/",title:"CustomView",parent:"Advanced Topics",content:`(TBD)
`}),e.add({id:10,href:"/getting_started/",title:"Getting Started",parent:"Pagoda",content:""}),e.add({id:11,href:"/",title:"Pagoda",parent:"",content:` Pagoda is a Web Application which is developed by the infrastructure division of DMM.com LLC on the purpose of managing information which is associated with on-premise equipments. This aims to be versatile and flexible for doing it.
In regard to the DMM.com, Pagoda is responsible for managing all phisical (e.g. where a Server is equipped on), logical (e.g. which IPv4/v6 addresses are binded to), managemental (e.g. accounting details for equipments), operational (e.g. who and how uses it) information. And this meets demands of individual departs departments that handle each different information and have own work styles.
We had managed those information by using a DCIM (a.k.a. Data Center Information Management) system and many spreadsheets which are related to it until then. Basic physical and logical information was managed in the DCIM. And other spreadsheets had related managemental and operational information. Sadly, there were many different similer spreadsheets that have same information.
When it comes to a equipments of Server, Data Center team has an interest in what kind of transceivers (SFP?, SFP+? or QSFP?) are installed on its ports. On the other hand, Contents Provider team is interested in storage devices on it. And Accounting team cares when they and how they were purchased. Please imagine a situation that individual teams try to handle those information by own spreadsheets. It\u0026rsquo;s nightmare to keep consistency of all those spreadsheets once its physical (this Server) would be disposed.
The original motivation of developing this software is solving this problem. If you are interested in more information about it, please check below page. (https://www.janog.gr.jp/meeting/janog45/en/program/infrabcp)
`}),e.add({id:12,href:"/tags/",title:"Tags",parent:"Pagoda",content:""})})()