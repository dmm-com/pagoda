<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced Topics on Pagoda</title><link>https://dmm-com.github.io/pagoda/advanced/</link><description>Recent content in Advanced Topics on Pagoda</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://dmm-com.github.io/pagoda/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dmm-com.github.io/pagoda/advanced/advanced_search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/advanced_search/</guid><description>Advanced Search Advanced Search is a powerful feature that allows you to search across multiple entities and their attributes with various search options and filters.
Features Search Capabilities Cross-Entity Search
Search across multiple entity types simultaneously Filter results by entity type Combine search results from different entities Attribute-Based Search
Search by specific attribute values Support for various data types: Text (string, multi-line text) Numbers Dates and date ranges Boolean values Object references Search Options</description></item><item><title/><link>https://dmm-com.github.io/pagoda/advanced/categories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/categories/</guid><description>Categories Categories in Pagoda help you organize and group related entities for easier navigation and management. Think of categories as customizable collections of links to your entity sets.
Features Flexible Grouping: Create categories to group related entities together Multiple Entity Association: Link multiple entities to a single category Search &amp;amp; Filter: Quickly find categories using the search functionality Priority Setting: Control the display order of categories Notes: Add descriptions or additional information to categories Managing Categories Creating a Category Click the &amp;ldquo;Create New Category&amp;rdquo; button Fill in the required information: Name: Category identifier Notes: Additional information or description Models: Select one or more entities to include Priority: Set display order (lower numbers appear first) Viewing Categories Categories are displayed in a grid layout, showing:</description></item><item><title/><link>https://dmm-com.github.io/pagoda/advanced/frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/frontend/</guid><description>Frontend Architecture Pagoda provides two distinct user interfaces: a modern React-based SPA (New UI) and a traditional Django template-based interface (Legacy UI). This document explains both interfaces, their features, and how to work with them.
For Users Overview New UI (React SPA) Modern, responsive single-page application Fast, client-side navigation Real-time updates and validations Consistent look and feel using Material-UI Internationalization support Legacy UI (Django Templates) Traditional server-side rendered pages Direct database operations Stable and proven interface Simpler architecture for basic operations Key Features Common Features Entity and attribute management User and group administration Access control management Advanced search capabilities History tracking Webhook management New UI Specific Features Improved response times through API-based operations Modern form handling with real-time validation Enhanced user experience with instant feedback Consistent styling across all pages Mobile-friendly responsive design Legacy UI Specific Features Direct database operations Server-side validation Traditional navigation pattern Simpler debugging process When to Use Which UI Use New UI When Working with modern browsers Requiring real-time feedback Needing mobile-friendly interface Performing complex data operations Integrating with other modern web applications Use Legacy UI When Requiring simpler, proven interface Working in environments with limited JavaScript support Needing direct database operations Performing basic CRUD operations For Developers Architecture Overview New UI Architecture Core Technologies React 18 TypeScript Material-UI (MUI) react-router for routing react-hook-form for form management zod for schema validation i18next for internationalization Directory Structure frontend/src/ ├── apiclient/ # API client wrapper ├── components/ # Reusable UI components ├── hooks/ # Custom React hooks ├── i18n/ # Internationalization ├── pages/ # Page components ├── repository/ # Data access layer ├── routes/ # Routing configuration └── services/ # Business logic Key Components API Client: Auto-generated from OpenAPI specs Form Management: react-hook-form with zod validation State Management: React hooks and context Routing: react-router with type-safe routes UI Components: Material-UI based components Legacy UI Architecture Core Technologies Django Templates jQuery (where needed) Bootstrap for styling Template Structure templates/ ├── advanced_search/ # Search interface ├── edit_entry/ # Entry management ├── list_entry/ # Entry listing ├── registration/ # User registration ├── role/ # Role management └── show_entry/ # Entry display Development Guidelines Setting Up Development Environment # Install dependencies npm install # Start development server npm run watch # Build for production npm run build:production Adding New Features New UI Development</description></item><item><title>CustomView</title><link>https://dmm-com.github.io/pagoda/advanced/custom_view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dmm-com.github.io/pagoda/advanced/custom_view/</guid><description>Custom View Overview Custom Views in Pagoda allow developers to extend the standard UI with their own React-based interfaces. This feature enables you to create specialized views that leverage Pagoda&amp;rsquo;s core functionality while providing tailored user experiences for specific use cases.
By using Custom Views, you can build interfaces that:
Present data in specialized formats Implement domain-specific workflows Integrate with Pagoda&amp;rsquo;s data model and ACL system Provide alternative navigation or interaction patterns What You Can Do with Custom Views Custom Views enable you to:</description></item></channel></rss>