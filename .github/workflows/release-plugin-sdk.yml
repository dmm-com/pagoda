name: Release pagoda-plugin-sdk packages (npm and Python) to GitHub Registry

on:
  push:
    tags:
      # NOTE it should be plugin-sdk-<major>.<minor>.<patch>
      - 'plugin-sdk-*'
  # Manual trigger for testing (feature branches)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0-test)'
        required: true
        default: '0.1.0-test'

jobs:
  # Existing npm package release
  release-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set repository information
        id: repo_info
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          echo "owner=${REPO_OWNER}" >> $GITHUB_OUTPUT
          echo "scope=@${REPO_OWNER}" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
          scope: "${{ steps.repo_info.outputs.scope }}"

      - name: Extract version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/plugin-sdk-}" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json with dynamic scope and version
        run: |
          echo "Repository owner: ${{ steps.repo_info.outputs.owner }}"
          echo "Scope: ${{ steps.repo_info.outputs.scope }}"
          echo "Version: ${{ steps.version.outputs.version }}"

          # Update package name with dynamic scope
          CURRENT_NAME=$(jq -r '.name' package.json)
          echo "Current package name: $CURRENT_NAME"

          NEW_NAME="${{ steps.repo_info.outputs.scope }}/$(echo $CURRENT_NAME | sed 's/@[^/]*\///')"
          echo "New package name: $NEW_NAME"

          jq --arg name "$NEW_NAME" '.name = $name' package.json > tmp.json && mv tmp.json package.json

          # Set version
          npm version "${{ steps.version.outputs.version }}" --no-git-tag-version

          echo "Updated package.json:"
          cat package.json | jq '{name, version}'
      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Build library
        run: npm run build:lib
      - name: Publish package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # Python package release
  release-python:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Extract version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/plugin-sdk-}" >> $GITHUB_OUTPUT
          fi

      - name: Set repository information
        id: repo_info
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          echo "Repository owner: ${REPO_OWNER}"
          echo "owner=${REPO_OWNER}" >> $GITHUB_OUTPUT

          # Set package name based on repository owner
          if [[ "${REPO_OWNER}" == "dmm-com" ]]; then
            PACKAGE_NAME="dmm-com-pagoda-plugin-sdk"
            REGISTRY_URL="https://pypi.pkg.github.com/dmm-com/"
          else
            PACKAGE_NAME="${REPO_OWNER}-pagoda-plugin-sdk"
            REGISTRY_URL="https://pypi.pkg.github.com/${REPO_OWNER}/"
          fi

          echo "Python package name: ${PACKAGE_NAME}"
          echo "Registry URL: ${REGISTRY_URL}"

          echo "package_name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          echo "registry_url=${REGISTRY_URL}" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        working-directory: ./plugin/sdk
        run: |
          sed -i "s/version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml

      - name: Build Python package
        working-directory: ./plugin/sdk
        run: python -m build

      - name: Update package name for GitHub Packages
        working-directory: ./plugin/sdk
        run: |
          echo "Updating Python package name to: ${{ steps.repo_info.outputs.package_name }}"
          echo "Registry URL: ${{ steps.repo_info.outputs.registry_url }}"

          # Show current package name
          echo "Current pyproject.toml name:"
          grep 'name = ' pyproject.toml

          # Update package name to include organization namespace for GitHub Packages
          sed -i 's/name = "pagoda-plugin-sdk"/name = "${{ steps.repo_info.outputs.package_name }}"/' pyproject.toml

          # Show updated package name
          echo "Updated pyproject.toml name:"
          grep 'name = ' pyproject.toml

      - name: Publish to GitHub Packages
        working-directory: ./plugin/sdk
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m twine upload \
            --repository-url ${{ steps.repo_info.outputs.registry_url }} \
            --verbose \
            dist/*

